#!/bin/bash
#####################################################################
#                                                                   #
# This script is used to automate the creation of tokens instead of #
# doing it manually, which is quite a tedious task.                 #
#                                                                   #
# How to use:                                                       #
# ./make_token                                                      #
# If you encounter a "permission denied" error                      #
# Run the following command: chmod +x make_token                    #
#                                                                   #
# ping me if you want to add or modify the logic:                   #
# Email: ben.borla@ballys.com                                       #
# Teams: Ben Borla                                                  #
#                                                                   #
#####################################################################

red='\033[0;31m'
reset='\033[0m'
green='\033[0;32m'
pink='\033[0;95m'

function cascadeToDirectories() {
  for dir in ${1}/*; do
    paste_to_dir="${dir}/${4}/"
    if [ ! -f "${paste_to_dir}${2}" ]; then
      echo -e "TASK: ${pink}Created ${2} in ${paste_to_dir}.${reset}"
      cp ${3} ${paste_to_dir} 
    else
      echo -e "${pink}Skipping ${paste_to_dir}${3}. ${red}File already exist.${reset}"
    fi
  done
  echo
  echo -e "${green}Done!${reset}"
}

function createFileToDirectories() {
  for dir in ${1}/*; do
    to_dir="${dir}/${3}/"
    echo -e "TASK: ${pink}Created new file ${2} to ${to_dir}.${reset}"
    echo "{}" > "${to_dir}/${2}"
  done
  echo
  echo -e "${green}Done!${reset}"
}

function create() {
  type=${1}
  token_name="${2}.tokens.json"
  base_dir='./storage'
  default_dir_for_tokens='verajohn_jp'
  file_to_copy="${base_dir}/${default_dir_for_tokens}/${type}/${token_name}"

  # Check if token_name is empty
  if [ -z ${token_name} ]; then
    echo -e "${red}Error: Component or purpose token name is required!${reset}"
  fi

  # check first if the component | purpose token exists in 
  # storage/verajohn_jp

  should_cascade=true

  echo -e "${pink}Checking from ${file_to_copy}${reset}"
  echo

  if [ ! -f "${file_to_copy}" ]; then
    should_cascade=false
  fi

  if $should_cascade; then
    echo -e "INFO: ${green}Cascading ${token_name} to all brands.${reset}"
    echo
    cascadeToDirectories ${base_dir} ${token_name} ${file_to_copy} ${type}
  else
    echo -e "INFO: ${green}Creating new file ${token_name} to all brands.${reset}"
    echo
    createFileToDirectories ${base_dir} ${token_name} ${type}
  fi
}

echo
echo -e "${pink}Choose an action type:${reset}"
options=("Create purpose token" "Create brand token" "Quit")

select choice in "${options[@]}"; do
  case "$choice" in
    "Create purpose token")
      echo
      read -rp "Enter token name: " name
      create "purpose" ${name}
      break
      ;;
    "Create brand token")
      read -rp "Enter token name: " name
      create "brand" ${name}
      break
      ;;
    "Quit")
      echo
      echo "Bye!"
      break
      ;;
    *)
      echo "Invalid choice"
      ;;
  esac
done
